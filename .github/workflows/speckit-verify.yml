name: speckit-verify
on:
  pull_request:
  push:
    branches: [main]
jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '24', cache: 'pnpm' }
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.12.0
      - run: corepack enable
      - run: pnpm install --frozen-lockfile
      - run: pnpm -w -r build
      - name: Build Speckit Core
        run: pnpm --filter @speckit/core run build
      - name: Build Speckit CLI
        run: pnpm --filter @speckit/cli run build
      - name: Regenerate docs from spec
        run: node packages/speckit-cli/dist/cli.js gen --write
      - name: Audit generated docs
        run: node packages/speckit-cli/dist/cli.js audit
      - name: Validate analyzer artifacts
        run: pnpm speckit:validate-artifacts
      - name: Fail if generated docs drift
        run: git diff --exit-code || (echo "Generated docs drift detected. Run 'speckit gen --write' and commit." && exit 1)
      - name: Run Speckit Doctor
        id: doctor
        shell: bash
        run: node packages/speckit-cli/dist/cli.js doctor --json > doctor-report.json
        continue-on-error: true
      - name: Upload doctor report
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: doctor-report
          path: doctor-report.json
      - name: Comment doctor summary
        if: ${{ github.event_name == 'pull_request' && always() }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'doctor-report.json';
            if (!fs.existsSync(path)) {
              core.warning('doctor-report.json missing; skipping doctor comment.');
              return;
            }
            const report = JSON.parse(fs.readFileSync(path, 'utf8'));
            const policies = Array.isArray(report.policies) ? report.policies : [];
            const templates = report.templatesByMode ?? {};
            const lines = ['| Check | Status | Detail |', '| --- | --- | --- |'];
            for (const policy of policies) {
              lines.push(`| ${policy.label} | ${policy.ok ? '✅' : '❌'} | ${policy.detail ?? ''} |`);
            }
            const marker = '<!-- speckit-doctor-report -->';
            const body = [
              marker,
              '## Speckit Doctor Report',
              '',
              `**Default mode:** ${report.defaultMode ?? 'unknown'}`,
              '',
              '### Templates',
              '',
              '```json',
              JSON.stringify(templates, null, 2),
              '```',
              '',
              '### Policy Checks',
              '',
              lines.join('\n'),
              marker,
            ].join('\n');
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number, per_page: 100 });
            const existing = comments.find((comment) => comment.body && comment.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number, body });
            }
      - name: Enforce doctor policies
        if: always()
        env:
          DOCTOR_OUTCOME: ${{ steps.doctor.outcome }}
        run: |
          node <<'NODE'
          const fs = require('fs');
          const failures = [];
          const outcome = process.env.DOCTOR_OUTCOME;

          if (!fs.existsSync('doctor-report.json')) {
            failures.push('doctor-report.json was not produced.');
          }

          let report = null;
          if (fs.existsSync('doctor-report.json')) {
            try {
              report = JSON.parse(fs.readFileSync('doctor-report.json', 'utf8'));
            } catch (error) {
              failures.push(`Failed to parse doctor-report.json: ${error.message}`);
            }
          }

          if (report) {
            const policies = Array.isArray(report.policies) ? report.policies : [];
            const policyByLabel = new Map(policies.map((policy) => [policy.label, policy]));

            const ensurePolicy = (label, message) => {
              const entry = policyByLabel.get(label);
              if (!entry || !entry.ok) {
                const detail = entry && entry.detail ? ` (${entry.detail})` : '';
                failures.push(`${message}${detail}`);
              }
            };

            ensurePolicy('Classic templates available', 'No templates registered for classic mode.');
            ensurePolicy('Default mode is classic', "Default mode must be 'classic'.");
            ensurePolicy('Catalog gate workflow present', 'Catalog gate workflow is missing.');
            ensurePolicy("Catalog gate requires 'catalog:allowed' label", "Catalog guard must require the 'catalog:allowed' label.");

            const templatesByMode = report.templatesByMode ?? {};
            const classicTemplates = Array.isArray(templatesByMode.classic) ? templatesByMode.classic : [];
            if (classicTemplates.length === 0) {
              failures.push('doctor-report.json shows no templates for classic mode.');
            }

            const defaultMode = typeof report.defaultMode === 'string' ? report.defaultMode.toLowerCase() : '';
            if (defaultMode !== 'classic') {
              failures.push(`doctor-report.json reported default mode '${report.defaultMode ?? 'unknown'}'.`);
            }
          }

          if (outcome && outcome !== 'success') {
            failures.push('speckit doctor command reported a failure.');
          }

          if (failures.length > 0) {
            console.error('Doctor guard failures:\n - ' + failures.join('\n - '));
            process.exit(1);
          }
          NODE
